global:
  postgresql:
    # -- see `magda-core` chart document
    existingSecret: "db-main-account-secret"
    # -- PostgreSQL username
    # The created user will have superuser privileges if username is postgres
    # For in k8s PostgreSQL, we should use `postgres` so it has privileges for DB schema migrators to run
    postgresqlUsername: "postgres"
    postgresqlDatabase: "postgres"
    # -- Whether auto create password secret. More see `magda-core` chart document
    autoCreateSecret: true

postgresql:
  fullnameOverride: "default-db-postgresql"
  nameOverride: "default-db-postgresql"
  image: 
    # -- the default docker image tag/version used by the postgresql chart. 
    # When dump the magda version using `yarn set-version` (at magda repo root), this default version will be auto-replaced with the new chart version number.
    tag: "1.0.0-alpha.0"
    repository: "data61/magda-postgres"
  
  # -- For dev cluster, we can set it to `magda-9` to controll how combined-db is scheduled.
  # e.g. schedule only on non-preemptible nodes
  priorityClassName: ""
  
  # -- the name of config map contains entended postgresql config options.
  # You should not change this value as this configMap is auto-generated.
  # If you want to override the postgresql conf option, you should add options to `.Values.config` field of `magda-postgres` chart.
  # Please note: For this field, you can use template string e.g. "{{ .Values.fullnameOverride }}" to reference any values passed to subchat `postgresql`.
  # See more: https://helm.sh/docs/howto/charts_tips_and_tricks/#using-the-tpl-function
  extendedConfConfigMap: "{{ .Values.fullnameOverride }}-extended-config"

  # -- the name of config map contains extra env vars for postgresql pod.
  # You should not change this value as this configMap is auto-generated.
  # If you want to add extra env vars, you should add vars to `.Values.envVars` field of `magda-postgres` chart.
  # Please note: For this field, you can use template string e.g. "{{ .Values.fullnameOverride }}" to reference any values passed to subchat `postgresql`.
  # See more: https://helm.sh/docs/howto/charts_tips_and_tricks/#using-the-tpl-function
  extraEnvVarsCM: "{{ .Values.fullnameOverride }}-extra-env-vars"

  primary:
    extraVolumes:
    # -- This volumn is used for storing walg prefetch data.
    # Added to avoid pg13 pg_rewind issue:
    # https://github.com/wal-g/wal-g/blob/master/docs/PostgreSQL.md
    # Please do not remove.
    - name: magda-walg-prefetch
      emptyDir: {}
    extraVolumeMounts:
    # -- This volumne mount is used for storing walg prefetch data
    # This has to be outside postgresql data dir to avoid pg13 pg_rewind issue:
    # https://github.com/wal-g/wal-g/blob/master/docs/PostgreSQL.md
    # Please do not remove.
    - name: magda-walg-prefetch
      mountPath: "/bitnami/postgresql/walg_prefetch"
      
  persistence:
    size: "50Gi"
  resources:
    requests:
      cpu: 200m
      memory: 500Mi
  
  livenessProbe:
    # -- `customLivenessProbe` will only be used when `enabled`=`false`
    # Otherwise, default livenessProbe will be used.
    enabled: false
  # -- Custom Liveness Probe for postgresql.
  # when in recovery mode, only check whether `$PGDATA/recovery.signal` exists.
  customLivenessProbe: |
    exec:
      command:
        - /bin/sh
        - -c
        - |
          if [ -f /wal-g/base-backup.fetching ]
          then 
          exit 0
          fi
        {{- if (include "postgresql.database" .) }}
          exec pg_isready -U {{ include "postgresql.username" . | quote }} -d "dbname={{ include "postgresql.database" . }} {{- if and .Values.tls.enabled .Values.tls.certCAFilename }} sslcert={{ include "postgresql.tlsCert" . }} sslkey={{ include "postgresql.tlsCertKey" . }}{{- end }}" -h 127.0.0.1 -p {{ template "postgresql.port" . }}
        {{- else }}
          exec pg_isready -U {{ include "postgresql.username" . | quote }} {{- if and .Values.tls.enabled .Values.tls.certCAFilename }} -d "sslcert={{ include "postgresql.tlsCert" . }} sslkey={{ include "postgresql.tlsCertKey" . }}"{{- end }} -h 127.0.0.1 -p {{ template "postgresql.port" . }}
        {{- end }}
    initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
    periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
    timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
    successThreshold: {{ .Values.livenessProbe.successThreshold }}
    failureThreshold: {{ .Values.livenessProbe.failureThreshold }}

  readinessProbe:
    # -- `customReadinessProbe` will only be used when `enabled`=`false`
    # Otherwise, default livenessProbe will be used.
    enabled: false
  # -- Custom Readiness Probe for postgresql.
  # when in recovery mode, only check whether `$PGDATA/recovery.signal` exists.
  customReadinessProbe: |
    exec:
      command:
        - /bin/sh
        - -c
        - -e
        - |
          if [ -f /wal-g/base-backup.fetching ]
          then 
          exit 0
          fi
        {{- if (include "postgresql.database" .) }}
          exec pg_isready -U {{ include "postgresql.username" . | quote }} -d "dbname={{ include "postgresql.database" . }} {{- if .Values.tls.enabled }} sslcert={{ include "postgresql.tlsCert" . }} sslkey={{ include "postgresql.tlsCertKey" . }}{{- end }}" -h 127.0.0.1 -p {{ template "postgresql.port" . }}
        {{- else }}
          exec pg_isready -U {{ include "postgresql.username" . | quote }} {{- if .Values.tls.enabled }} -d "sslcert={{ include "postgresql.tlsCert" . }} sslkey={{ include "postgresql.tlsCertKey" . }}"{{- end }} -h 127.0.0.1 -p {{ template "postgresql.port" . }}
        {{- end }}
        {{- if contains "bitnami/" .Values.image.repository }}
          [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
        {{- end }}
    initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
    periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
    timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
    successThreshold: {{ .Values.readinessProbe.successThreshold }}
    failureThreshold: {{ .Values.readinessProbe.failureThreshold }}

  # -- Posgresql host-based authentication config.
  # We added `replication` entry by default in order to enable remotely base backup creation using wal-g
  pgHbaConfiguration: |
    host     all             all        0.0.0.0/0               md5
    host     all             all        ::/0                    md5
    local    all             all                                md5
    host     all             all        127.0.0.1/32            md5
    host     all             all        ::1/128                 md5
    # replication keyword allows base backup to be created remotely using wal-g
    host     replication     all        0.0.0.0/0               md5

# -- any postgreSQL config options here have highest priority and will override any existing config option values.
# Be sure you understand the impact of any values set as they might override the values required for other helm chart options.
# More details please see here: extended-config-configmap.yaml template
config: {}

# -- any extra env vars that will be avialable in DB pod.
envVars: 
  WALG_PREFETCH_DIR: "/bitnami/postgresql/walg_prefetch"

backupRestore:
  # -- Storage config for backup & restore.
  # All supported storage and available storage config options can be found from [here](https://github.com/wal-g/wal-g/blob/master/docs/STORAGES.md).
  # e.g. 
  # ``` 
  # storageConfig:
  #   WALG_S3_PREFIX: "s3://bucket/path/to/folder"
  # ```
  # Secrets (e.g. `AWS_SECRET_ACCESS_KEY`) can be either set here or set in a manually created secret.
  # When use secret to storage secret, it's required to:
  # <ul>
  # <li>Set `.Values.backupRestore.storageSecretName` to the name of the secret contains all secret values for your storage option.</li>
  # <li>
  #   Mount the secret in a volumn for DB pod (mount to path `/etc/wal-g.d/env`) by add an additional entry to `.Values.postgresql.primary.extraVolumes` & `.Values.postgresql.primary.extraVolumeMounts`. 
  # </li>
  # </ul>
  storageConfig: {}
  storageSecretName: ""
  image:
    # -- wal-g docker image tag
    tag: "1.1.0"
    # -- wal-g docker image repo
    repository: "data61/magda-wal-g"
    # -- wal-g docker image pull policy
    pullPolicy: IfNotPresent
  backup:
    # whether backup feature should be turn on.
    enabled: false
    # archive timeout setting. See: https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-ARCHIVE-TIMEOUT
    archiveTimeout: 60
    # See: https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-WAL-LEVEL
    # You shouldn't change this option unless for special reason.
    walLevel: "replica"
    # -- old backup will be removed every time when a new backup has been created.
    # the backup removal is done via [wal-g delete](https://github.com/wal-g/wal-g/blob/master/docs/README.md#delete)
    # This option specify the number of most recent backups to retain during the backup removal
    numberOfBackupToRetain: 7
    # -- schedule (in Cron Syntax) to perform [base backup](https://www.postgresql.org/docs/current/continuous-archiving.html).
    # default to every Saturday 15:00PM UTC time (Sydney Time 1:00AM Sunday).
    # The base backup is produced using [wal-g](https://github.com/wal-g/wal-g) via [base backup protocol](https://www.postgresql.org/docs/current/app-pgbasebackup.html) remotely.
    schedule: "15 * * * 6"
    # -- resource config for the pod container that runs backup jobs. e.g.: <br/>
    # jobResourceConfig: <br/>
    # &nbsp;&nbsp;requests: <br/>
    # &nbsp;&nbsp;&nbsp;&nbsp;memory: "64Mi" <br/>
    # &nbsp;&nbsp;&nbsp;&nbsp;cpu: "250m" <br/>
    jobResourceConfig: {}
  recoveryMode: 
    # -- Whether run the DB in the receovery mode.
    # When correct config is in place, recovery script will run (using [wal-g](https://github.com/wal-g/wal-g)) to restore DB using previous backup.
    enabled: false
    # -- the name of the base backup that will be used for restoring database. 
    baseBackupName: "LATEST"
    
    

    



  