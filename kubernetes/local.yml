#VARNISH
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: varnish
spec:
  replicas: 1
  template:
    metadata:
      labels:
        service: varnish
    spec:
      containers:
      - name: varnish
        image: "mobulum/varnish"
        imagePullPolicy: Always
        env:
        - name: BACKEND_PORT_80_TCP_ADDR
          value: api
        - name: BACKEND_ENV_PORT
          value: "80"
        - name: LISTEN_PORT
          value: "80"
        - name: THROTTLE_LIMIT
          value: "1000req/1s"
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: varnish
spec:
  ports:
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30009
  selector:
    service: varnish
  type: "NodePort"
---
#API
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: api
spec:
  replicas: 1
  template:
    metadata:
      labels:
        service: api
    spec:
      containers:
      - name: api
        resources:
          requests:
            memory: 150Mi
          limits:
            memory: 500Mi
        env:
        - name: SCALA_ENV
          value: local
        - name: MAGDA_SEARCH_ROLE
          value: both
        image: "localhost:5000/data61/magda-metadata-local:latest"
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        - containerPort: 8000
        volumeMounts:
        - mountPath: /usr/regions
          name: regions
        - mountPath: /usr/src/app/
          name: src
        - mountPath: /root/.ivy2/
          name: ivy-cache
      volumes:
      - name: regions
        hostPath:
          path: ${projectDir}/regions
      - name: src
        hostPath:
          path: ${projectDir}
      - hostPath:
          path: ${homeDir}/.ivy2/
        name: ivy-cache
---
apiVersion: v1
kind: Service
metadata:
  name: api
spec:
  ports:
  - name: http
    port: 80
    targetPort: 80
  - name: debug
    port: 8000
    targetPort: 8000
    nodePort: 30008
  selector:
    service: api
  type: "NodePort"
---
# ElasticSearch
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: es
  labels:
    component: elasticsearch
spec:
  template:
    metadata:
      labels:
        component: elasticsearch
    spec:
      containers:
      - name: es
        resources:
          requests:
            memory: 1500Mi
          limits:
            memory: 3000Mi
        securityContext:
          privileged: true
          capabilities:
            add:
              - IPC_LOCK
        image: localhost:5000/data61/elasticsearch-kubernetes:2.4.1
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: "CLUSTER_NAME"
          value: "myesdb"
        - name: NODE_MASTER
          value: "true"
        - name: NODE_DATA
          value: "true"
        - name: HTTP_ENABLE
          value: "true"
        - name: ES_HEAP_SIZE
          value: "1000m"
        - name: REPO
          value: "/snapshots"
        ports:
        - containerPort: 9200
          name: http
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP
        volumeMounts:
        - name: storage
          mountPath: /data
        - name: snapshots
          mountPath: /snapshots
      volumes:
      - name: snapshots
        hostPath:
          path: ${projectDir}/snapshots
      - name: "storage"
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  labels:
    component: elasticsearch
spec:
  ports:
  - name: http
    port: 9200
    targetPort: 9200
    nodePort: 30092
  - name: java
    port: 9300
    targetPort: 9300
    nodePort: 30093
  selector:
    component: elasticsearch
  type: "NodePort"
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-discovery
  labels:
    component: elasticsearch
spec:
  selector:
    component: elasticsearch
  ports:
  - name: transport
    port: 9300
    protocol: TCP
---
# KIBANA
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kibana
spec:
  replicas: 1
  template:
    metadata:
      labels:
        service: kibana
    spec:
      containers:
      - env:
        - name: ELASTICSEARCH_URL
          value: http://elasticsearch:9200
        image: seeruk/docker-kibana-sense
        name: kibana
        ports:
        - containerPort: 5601
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
spec:
  ports:
  - name: main
    port: 5601
    targetPort: 5601
    nodePort: 30056
  selector:
    service: kibana
  type: "NodePort"