package au.csiro.data61.magda.api

import au.csiro.data61.magda.model.misc._
import au.csiro.data61.magda.search.SearchStrategy.MatchAll
import au.csiro.data61.magda.test.util.Generators
import org.scalacheck.Gen


class DataSetAutoGeneratedPublisherAcronymSearchSpec extends DataSetSearchSpecBase {

  describe("searching for a dataset publisher's acronym should return that dataset eventually") {
    it("for auto-generated publishers") {
      def dataSetToQuery(dataSet: DataSet) = {
        dataSet.publisher
          .flatMap(d => getAcronymFromPublisherName(d.name))
          .map(acronym => Generators.randomCaseGen(acronym)) match {
            case Some(randomCaseAcronymGen) => randomCaseAcronymGen.flatMap(acronym => Query(freeText = Some(acronym)))
            case None                       => Gen.const(Query())
          }
      }

      doDataSetFilterTest(dataSetToQuery) { (query, response, dataSet) =>
        whenever(query != Query()) {

          withClue(s"query ${query.freeText} and dataSet publisher ${dataSet.publisher.flatMap(_.name)}") {
            response.strategy.get should be(MatchAll)
            response.dataSets.isEmpty should be(false)
            response.dataSets.exists(_.identifier == dataSet.identifier) should be(true)
          }
        }
      }
    }
  }
}
